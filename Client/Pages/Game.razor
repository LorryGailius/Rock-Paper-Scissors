@page "/play"
@using Rock_Paper_Scissors.Client.Services;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager
@inject IUserService UserService;
@implements IAsyncDisposable;

<div class="index">
    <button style="position:absolute;left:0;top:0;" @onclick=@ReturnToMenu>◄Return to menu</button>
    @if(isConnected)
    {
        <h1> Room @roomCode</h1>
        <h1>User @UserService.User.Username</h1>
        <h1>Connected : @isConnected</h1>
    }
    else
    {
        <h1>Could not connect to game</h1>
    }
</div>


@code {
    string message = String.Empty;
    string roomCode = String.Empty;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        roomCode = GetRoomCodeFromUrl();
        
        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            Console.WriteLine(message);
        });

        await hubConnection.StartAsync();

        if (hubConnection is not null)
        {
            await hubConnection.SendAsync("JoinRoom", UserService.User);
        }
    }

    public bool isConnected => hubConnection?.State == HubConnectionState.Connected;

    private string GetRoomCodeFromUrl()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var roomCode = queryParams.Get("roomCode");

        if(roomCode.Length < 6)
        {
            ReturnToMenu();
        }

        UserService.User.RoomCode = roomCode;
        return roomCode;
    }

    private void ReturnToMenu()
    {
        NavigationManager.NavigateTo("/");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
