@page "/play"
@using Rock_Paper_Scissors.Client.Services;
@using System.Timers;
@using Microsoft.AspNetCore.SignalR.Client;
@inject NavigationManager NavigationManager
@inject IUserService UserService;
@implements IAsyncDisposable;

<div class="index">
    <button style="position:absolute;left:0;top:0;" @onclick=@ReturnToMenu>◄Return to menu</button>



    @if (errored)
    {
        <h1>@errorMessage</h1>
    }
    else
    {
        @if (isConnected)
        {
            @if (!inRoom)
            {
                <h5>Please enter you username for the game:</h5>
                <InputText @bind-Value=@UserService.User.Username class="input username" placeholder="Username" />
                <button @onclick=@JoinRoom>Join</button>
            }

            @if(enableButtons)
            {
                <h1>S</h1>
                <h1>R</h1>
                <h1>P</h1>
            }

            <div class="selection-container">
                <button class="selector">S</button>
                <button class="selector">R</button>
                <button class="selector">P</button>
            </div>

        }
        else
        {
            <h1>Could not connect to game</h1>
        }
    }
</div>


@code {
    private string message = String.Empty;
    private string roomCode = String.Empty;
    private HubConnection? hubConnection;
    private bool inRoom = false;
    private bool errored = false;
    private string errorMessage = String.Empty;
    private Timer timer;
    private bool isTimerElapsed;
    private bool enableButtons = false;

    protected override async Task OnInitializedAsync()
    {
        roomCode = GetRoomCodeFromUrl();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On<string>("ReceiveMessage", (message) =>
        {
            Console.WriteLine(message);
        });

        hubConnection.On("Success", () =>
        {
            inRoom = true;
            StateHasChanged();
        });

        hubConnection.On<string>("Error", (message) =>
        {
            errored = true;
            errorMessage = message;
            Console.WriteLine(message);
            StateHasChanged();
        });

        hubConnection.On("StartGame", () =>
        {
            Console.WriteLine("Game has started");
            enableButtons = true;
            StateHasChanged();
            StartTimer();
        });

        await hubConnection.StartAsync();

        await JoinRoom();
    }

    private void StartTimer()
    {
        timer = new Timer(10000);
        timer.Elapsed += TimeElapsed;
        timer.Start();
    }

    private void TimeElapsed(object sender, ElapsedEventArgs e)
    {
        timer.Stop();
        enableButtons = false;
        isTimerElapsed = true;
        StateHasChanged();
    }

    public async Task JoinRoom()
    {
        Console.WriteLine("Joining room");
        if (hubConnection is not null && !String.IsNullOrEmpty(UserService.User.Username))
        {
            await hubConnection.SendAsync("JoinRoom", UserService.User);
        }
    }

    public bool isConnected => hubConnection?.State == HubConnectionState.Connected;

    private string GetRoomCodeFromUrl()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var roomCode = queryParams.Get("roomCode");

        if (roomCode.Length < 6)
        {
            ReturnToMenu();
        }

        UserService.User.RoomCode = roomCode;
        return roomCode;
    }

    private void ReturnToMenu()
    {
        NavigationManager.NavigateTo("/");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
