@page "/play"
@using Rock_Paper_Scissors.Client.Services;
@using System.Timers;
@using Microsoft.AspNetCore.SignalR.Client;
@using Rock_Paper_Scissors.Shared;
@inject NavigationManager NavigationManager
@inject IUserService UserService;
@implements IAsyncDisposable;

<div class="index">
    <button style="position:absolute;left:0;top:0;" @onclick=@ReturnToMenu>◄Return to menu</button>
    <h1>@isConnected</h1>
    @if (errored)
    {
        <h1 class="centered">@errorMessage</h1>
    }
    else
    {
        @if (loading)
        {
            <h1 class="centered">Loading...</h1>
        }
        else
        {
            @if (isConnected)
            {
                @if (!inRoom)
                {
                    if (String.IsNullOrEmpty(UserService.User.Username))
                    {
                        <div class="centered">
                            <h5>Please enter you username for the game:</h5>
                            <InputText @bind-Value=@newUser class="input" placeholder="Username" />
                            <button @onclick=@JoinRoom>Join</button>
                        </div>
                    }
                }
                else
                {
                    @if (enableButtons)
                    {
                        <h1>@timeLeft</h1>

                        <div class="selection-container">
                            <button class='selector @ButtonClass("Scissors")' @onclick='() => SelectButton("Scissors")'><img src="images/scissors.svg" /></button>
                            <button class='selector @ButtonClass("Rock")' @onclick='() => SelectButton("Rock")'><img src="Images/rock.svg" /></button>
                            <button class='selector @ButtonClass("Paper")' @onclick='() => SelectButton("Paper")'><img src="Images/paper.svg" /></button>
                        </div>
                    }
                    else if (winner is not null)
                    {
                        @if (winner.Username == ".:Tie:.")
                        {
                            <h1 class="centered">It's a TIE</h1>
                        }
                        else
                        {
                            <h1 class="centered">Winner is @winner.Username with <img src="Images/@(winner.Choice).svg" /></h1>
                        }
                    }
                    else
                    {
                        if (isTimerElapsed)
                        {
                            <h1 class="centered">Waiting for opponents response...</h1>
                        }
                        else
                        {
                            <h1 class="centered">Waiting for opponent to join...</h1>
                        }
                    }

                    <h1>@UserService.User.RoomCode</h1>

                    <div class="crd">
                        <h3 href="@NavigationManager.Uri">@NavigationManager.Uri</h3>
                    </div>
                }
            }
        }
    }
</div>


@code {
    private Player? winner;
    private string newUser = String.Empty;
    private string roomCode = String.Empty;
    private string errorMessage = String.Empty;
    private bool errored = false;
    private bool loading = false;
    private HubConnection? hubConnection;

    protected override async Task OnInitializedAsync()
    {
        loading = true;
        roomCode = GetRoomCodeFromUrl();

        hubConnection = new HubConnectionBuilder()
            .WithUrl(NavigationManager.ToAbsoluteUri("/gamehub"))
            .Build();

        hubConnection.On("Success", () =>
        {
            inRoom = true;
            StateHasChanged();
        });

        hubConnection.On<string>("Error", (message) =>
        {
            errored = true;
            errorMessage = message;
            StateHasChanged();
        });

        hubConnection.On("StartGame", () =>
        {
            winner = null;
            timeLeft = 10;
            enableButtons = true;
            errored = false;
            errorMessage = String.Empty;
            StartGameTimer();
            StateHasChanged();
        });

        hubConnection.On<Player>("GameEnd", (player) =>
        {
            winner = player;
            StateHasChanged();
        });
        timeoutTimer.Elapsed += TimeoutTimerElapsed;
        timeoutTimer.Start();
        await hubConnection.StartAsync();
        loading = false;
        await JoinRoom();
    }

    private Timer gameTimer;
    private bool isTimerElapsed;
    private int timeLeft = 10;

    private void StartGameTimer()
    {
        gameTimer = new Timer(1000);
        gameTimer.Elapsed += TimeElapsed;
        gameTimer.Start();
    }

    private async void TimeElapsed(object sender, ElapsedEventArgs e)
    {
        if (timeLeft > 1)
        {
            timeLeft--;
            StateHasChanged();
        }
        else
        {
            gameTimer.Stop();
            enableButtons = false;
            isTimerElapsed = true;
            StateHasChanged();
            UserService.User.Choice = selectedButton is null ? "null" : selectedButton;
            if (hubConnection is not null)
            {
                await hubConnection.SendAsync("Answer", UserService.User);
            }
        }
    }

    private Timer timeoutTimer = new Timer(7000);

    private async void TimeoutTimerElapsed(object sender, ElapsedEventArgs e)
    {
        if (!isConnected)
        {
            timeoutTimer.Stop();
            errored = true;
            errorMessage = "Could not connect to game";
        }
    }

    private bool inRoom = false;
    public bool isConnected => hubConnection?.State == HubConnectionState.Connected;

    public async Task JoinRoom()
    {
        if (!String.IsNullOrEmpty(newUser))
        {
            UserService.User.Username = newUser.Trim();
        }

        if (hubConnection is not null && !String.IsNullOrEmpty(UserService.User.Username))
        {
            await hubConnection.SendAsync("JoinRoom", UserService.User);
        }
    }

    private string GetRoomCodeFromUrl()
    {
        var uri = new Uri(NavigationManager.Uri);
        var queryParams = System.Web.HttpUtility.ParseQueryString(uri.Query);
        var roomCode = queryParams.Get("roomCode");

        if (roomCode.Length < 6)
        {
            ReturnToMenu();
        }

        UserService.User.RoomCode = roomCode;
        return roomCode;
    }

    private String selectedButton;
    private bool enableButtons = false;

    private void SelectButton(String button)
    {
        selectedButton = button;
        StateHasChanged();
    }

    private string ButtonClass(String button)
    {
        return button == selectedButton ? "selected" : "";
    }

    private void ReturnToMenu()
    {
        NavigationManager.NavigateTo("/");
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            await hubConnection.DisposeAsync();
        }
    }

}
