@page "/"
@using System.Text;
@using Rock_Paper_Scissors.Client.Services;
@using System.Timers;
@using BlazorAnimate;
@inject IUserService UserService;
@inject NavigationManager NavigationManager;

<div class="index">
    <div class="logo">
        <img style="height:100%;" src="Images/logo.svg" />
    </div>
    <h1>ROCK PAPER SCISSORS</h1>

    @switch (step)
    {
        case 1:

            if (hideAnimation)
            {
                <div class="menu" id="1">
                    <button @onclick=@HostOnClick>Create Game</button>
                    <button @onclick=@JoinOnClick>Join Game</button>
                </div>
            }
            else
            {
                <Animate Animation="Animations.SlideRight" hidden=@hideAnimation>
                    <div class="menu" id="1">
                        <button @onclick=@HostOnClick>Create Game</button>
                        <button @onclick=@JoinOnClick>Join Game</button>
                    </div>
                </Animate>
                hideAnimation = true;
            }
            break;
        case 2:
            <Animate Animation="Animations.SlideLeft">
                <div class="menu" id="2">
                    <h5>Username</h5>
                    <InputText @bind-Value=@UserService.User.Username class="input" placeholder="Username" />

                    @if (UserService.User.IsHost)
                    {
                        <button @onclick=@CreateRoom>Create</button>
                    }
                    else
                    {
                        <h5>Room Code</h5>
                        <InputText @bind-Value=@UserService.User.RoomCode class="input roomcode" placeholder="Room Code" />
                        <button @onclick=@JoinRoom>Join</button>
                    }


                </div>
            </Animate>
            <button @onclick=@BackOnClick style="position:absolute;bottom:0;">◄Go back</button>
            break;
    }
</div>

@code {
    bool hideAnimation = true;
    int step = 1;

    private void HostOnClick()
    {
        UserService.User.IsHost = true;
        step = 2;
    }

    private void JoinOnClick()
    {
        UserService.User.IsHost = false;
        step = 2;
    }

    private void BackOnClick()
    {
        UserService.User.IsHost = false;
        step = 1;
        hideAnimation = false;
    }

    public Animate animation1;
    private void Animate()
    {
        animation1.Run();
    }

    private void CreateRoom()
    {
        if (String.IsNullOrEmpty(UserService.User.Username))
        {
            return;
        }
        UserService.User.RoomCode = GenerateId(6);
        NavigationManager.NavigateTo($"/play?roomCode={UserService.User.RoomCode}");
    }

    private void JoinRoom()
    {
        if (String.IsNullOrEmpty(UserService.User.Username) || String.IsNullOrEmpty(UserService.User.RoomCode))
        {
            return;
        }
        UserService.User.RoomCode = UserService.User.RoomCode.ToUpper();
        UserService.User.Username = UserService.User.Username.Trim();
        UserService.User.RoomCode = UserService.User.RoomCode.Trim();
        NavigationManager.NavigateTo($"/play?roomCode={UserService.User.RoomCode}");
    }

    private string GenerateId(int length)
    {
        String availableChars = "ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";

        Random random = new Random();
        StringBuilder builder = new StringBuilder(length);

        for (int i = 0; i < length; i++)
        {
            builder.Append(availableChars[random.Next(availableChars.Length)]);
        }

        return builder.ToString();
    }
}
